spring.application.name=compagny-service
server.port=8080


## 1-  Configuration a Placer si on veut dockeriser L'application
## C'est a dire je veux avoir mun docker Compose avec Postgres , pgadmin et Rabbitma
## Le probleme est que ici rabbit mq ne marche pas , je ne sais pas pkoi,
## S'assurer tjrs k le fichier a ete correctement packager dabord ,
##pr cela s'assurer que la dependance existe ds builde ds pom.xml
## puis entrer mvn clean pour supprimer tout et a nouveau mvn clean package -DskipTests pr generer ces Packages , verifier
## Que le Dossier Target soit la avec les deux jar generer
##2- creer un  docker file ,
##3 - utiliser ds ce cas le dockercompose appeler mein-compose.yaml
#spring.datasource.url=${SPRING_DATASOURCE_URL}
#spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
#spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
## Configuration de RabbitMQ
#spring.rabbitmq.host=${RABBITMQ_HOST}
#spring.rabbitmq.port=${RABBITMQ_PORT}
#spring.rabbitmq.username=${RABBITMQ_USER}
#spring.rabbitmq.password=${RABBITMQ_PASSWORD}
















# si je ne desire pas builder l'application et que je desire utiliser postgres et rabbit mq
# utiliser plus tot cette configuration et le docker compose se trouve ds le Java-->> DockerCompose

 #Configuration de Postgres Sql
spring.datasource.url=jdbc:postgresql://localhost:5432/compagny_database
spring.datasource.username=dirane
spring.datasource.password=dirane
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Configuration Rabbit MQ
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

#spring.config.import: configserver:http://localhost:9296/

#Configuration de l'enregistrement et de la r�cup�ration dans Eureka : compagnyService
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
spring.cloud.config.enabled=false